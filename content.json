{"meta":{"title":"AsahiHuang的博客","subtitle":"相信的心就是你的魔法","description":null,"author":"Asahi Huang","url":"https://asahihuang.github.io","root":"/"},"pages":[],"posts":[{"title":"git常用指令","slug":"git常用指令","date":"2019-06-19T07:28:28.000Z","updated":"2019-06-19T07:30:05.384Z","comments":true,"path":"2019/06/19/git常用指令/","link":"","permalink":"https://asahihuang.github.io/2019/06/19/git常用指令/","excerpt":"1,git配置1234git config --global user.name &quot;username&quot;git config --global user.email &quot;email&quot;--global参数可以保证机器上所有的git仓库使用这个配置 然后输入","text":"1,git配置1234git config --global user.name &quot;username&quot;git config --global user.email &quot;email&quot;--global参数可以保证机器上所有的git仓库使用这个配置 然后输入 1ssh-keygen 2,git分支 查看分支：git branch 创建分支：git branch name 切换分支：git checkout name 创建+切换分支：git checkout –b name 合并某分支到当前分支：git merge name 删除分支：git branch –d name 3,git 远程仓库(github) 创建ssh key github上add ssh key github上创建新的仓库 根据GitHub仓库链接 1git remote add origin https://github.com/AsahiHuang/Data_Structure.git 将本地仓库推送到远程仓库 ,git push,实际将当前分支推送到远程 由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 现在,只要本地作提交,可通过 1git push origin master 把本地master分支的最新修改推送到GitHub 4,git文件修改回退1git reset –hard HEAD~100 指向上次修改的指针 或者 1git checkout -- filename 把filename文件在工作区的修改全部撤销 这里有两种情况 文件自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。 另外一种是文件已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。 再没有commit前,通过此命令也可将删除的文件(rm filename)恢复 5,远程仓库克隆1git clone 远程仓库地址 即可在本地生成一个版本库 6,git 分支策略​ 常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式 1git merge –-no-ff -m &quot;注释&quot; 合并分支 分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。 7,bug分支​ 在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是当前的dev分支上的工作到一半还没有提交,此时无法切换分支. ​ Git提供了stash 功能,可以把当前的工作现场隐藏,等恢复现场后继续工作 1git stash 此时工作区的状态时干净的 切换回主分支,新建一个临时分支,修复完成后,回到主分支并合并,删除临时分支 现在回到dev分支 此时工作区时干净的,可通过 1git stash list 查看, Git把stash内容存在某个地方了，但是需要恢复一下,两种办法: git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除 另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。 8. Git历史 查看日志 1git log 修改日志 最近一次commit的修改: 1git commit --amend","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://asahihuang.github.io/tags/git/"}]},{"title":"用hexo写博客","slug":"用hexo写博客","date":"2019-06-19T06:49:56.000Z","updated":"2019-06-19T07:16:37.837Z","comments":true,"path":"2019/06/19/用hexo写博客/","link":"","permalink":"https://asahihuang.github.io/2019/06/19/用hexo写博客/","excerpt":"用Hexo写博客安装1$ npm install -g hexo 在git bush中安装hexo","text":"用Hexo写博客安装1$ npm install -g hexo 在git bush中安装hexo 初始化新建一个hexo文件夹,用来存放所有代码. 1$ hexo init //初始化 hexo 会自动下载需要文件. 12hexo g //生成hexo s //启动本地服务 打开浏览器访问 http://localhost:4000 即可看到内容 修改主题​ 找到官方主题:https://hexo.io/themes/ 下载到hexo目录的theme文件下 1git clone #主题仓库地址* /theme 修改根目录的_config.yml 中的 theme: landsape 改为 *theme: #NewThemeName# * 如果出现莫名其妙问题可通过*hexo clean *来清理,在生成并发布 上传到GitHub1$ hexo d 首先,ssh key配置好,其次,配置_config.yml中有关deploy的部门: 1234deploy: type: git repository: git@github.com:#githubID#/#githubID#.github.io.git branch: master #内为替换内容,也就是你的GitHub用户名 其次还需要在git bash输入 1npm install hexo-deployer-git --save 现在输入*hexo d * 就会将本次有改动的代码全部提交,没有改动的不会 提交完成后原仓库内的文件都没了,存放在了source文件夹. 常用hexo 命令1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 12hexo s -g #生成并本地预览hexo d -g #生成并上传 写博客在git bash定位到hexo的根目录 1$ hexo new &apos;my-first-blog&apos; hexo就会在*_posts *下生成相关的md文件,然后再markdown编辑器上编写 一般完整的格式: 123456789---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文 让博文列表不显示全部内容默认情况下,生成的目录会显示全部的文章内容,可以再合适的位置加上 1&lt;!--more--&gt; 即可 参考:https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://asahihuang.github.io/tags/hexo/"}]},{"title":"开始的地方","slug":"开始的地方","date":"2019-06-19T05:33:54.000Z","updated":"2019-06-19T05:35:36.626Z","comments":true,"path":"2019/06/19/开始的地方/","link":"","permalink":"https://asahihuang.github.io/2019/06/19/开始的地方/","excerpt":"","text":"开始的地方","categories":[],"tags":[]}]}