<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog-Asahi</title>
  <icon>https://www.gravatar.com/avatar/1e701b8870303a644f28f38565fe4fe0</icon>
  <subtitle>相信的心就是你的魔法</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://asahihuang.github.io/"/>
  <updated>2019-11-06T11:42:01.693Z</updated>
  <id>https://asahihuang.github.io/</id>
  
  <author>
    <name>Asahi Huang</name>
    <email>im.xuhuang@live.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>难受的一天</title>
    <link href="https://asahihuang.github.io/%E9%9A%BE%E5%8F%97%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
    <id>https://asahihuang.github.io/难受的一天/</id>
    <published>2019-11-06T11:12:58.000Z</published>
    <updated>2019-11-06T11:42:01.693Z</updated>
    
    <content type="html"><![CDATA[<p>​        今天持续了许久晴空开始变得阴沉，一大早起来在车站等待教练开车带去考场，一路上教练重复着一个个项目的操作细节和步骤，我已经认为对这些轻车熟路，不过是去考场再做一遍。如果真的那么顺利当然也不会出现这样的标题了。</p><a id="more"></a><p>​        考试的时间可能半个小时都不到，但等待时间却足足花了半天，我从八点多进入考场一直等到两点才轮到我。因为进博会关系周一周二不安排考试，所以周三考试的人特别多。而且中途还出现了网络故障所有考生的考试都暂停了。等待的过程十分煎熬，一方面想早点结束，另一方面心中充满着的不安与焦虑。脑海中反复地问自己如果熄火了怎么办，如果入库车头没进线怎么办等等等自己曾经遭遇的。结果到了考试过程这些情况没碰到，却死在了坡道上了。第一次上坡害怕车右边压线，稍微打了点方向，结果上去停住直接报超过50厘米考试不合格。没办法重来一圈吧，第二次对牢了点上坡，加上速度放的有点快了，刹车，停车点在前面，考试关掉了。失望，难受，沮丧，缓缓的下坡只能继续练习练习后面的项目。</p><p>​        出来后告诉教练考试挂了，教练反复讲不是都和你讲过的吗。教练一直说管住离合就好了。。。其实我觉得我挂科原因是没有管住自己的腿。我一上车腿就不停地抖，加上考试失败后的心态，再次证明自己的心理素质是多么差。这些心理问题在驾考上暴露无疑。离开考场后看到离场考生有沮丧的，有欢喜的。我跟教练讲不用送我了，自己一个人走了条寂静小路。</p><p>​        生活的挫折岂止一个科目二的挂科，但如果无法从这一失败的阴影走出，往后的路只会更加艰难。  </p><p>AsahiHuang<br>2019.11.6  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        今天持续了许久晴空开始变得阴沉，一大早起来在车站等待教练开车带去考场，一路上教练重复着一个个项目的操作细节和步骤，我已经认为对这些轻车熟路，不过是去考场再做一遍。如果真的那么顺利当然也不会出现这样的标题了。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://asahihuang.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="https://asahihuang.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>单向链表的反转(递归法)</title>
    <link href="https://asahihuang.github.io/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%8F%8D%E8%BD%AC-%E9%80%92%E5%BD%92%E6%B3%95/"/>
    <id>https://asahihuang.github.io/单向链表的反转-递归法/</id>
    <published>2019-10-23T14:11:34.000Z</published>
    <updated>2019-11-07T14:20:14.233Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g88hraw4ntj31hc0u00vc.jpg" alt></p><p>上次讲了通过<a href="[https://blog.asahih.com/单向链表的反转//">迭代法</a> 的方式，新建一个NewL倒叙插入原链表结点来实现反转，这次来讲递归法。</p><a id="more"></a><p>首先，什么是递归，去Google搜递归，会得到一个“你是不是要找递归”的提示，点开后还是这个页面。这就是递归。递归简单说就是函数调用自己。递归思想类似与栈，后入先出。这里重点讲讲递归实现单向链表的过程。</p><p>我们还是以这样一个五个元素的单链表为例，<strong>注意和之前一样演示的链表包含一个头结点L</strong></p><p><img src="https://pan.asahih.com/images/2019/10/27/oTS3qmY5J0/1.png" alt></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//链表的结构</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> date;</span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="hljs-keyword">typedef</span> Node * LinkList;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归需要出口，回想斐波拉契数列递归实现，我们的出口是当数字n==1 || n ==2 时，return 1;结束。对于一个单向链表来说，遍历到末尾NULL就是终点，同时考虑空表的情况，所以我们就有了递归的出口：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">LinkList <span class="hljs-title">In_reverse</span><span class="hljs-params">(LinkList L)</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(L == <span class="hljs-literal">NULL</span> || L -&gt; next == <span class="hljs-literal">NULL</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归的问题规模需要逐渐缩小，我们设置递归的前进条件，也就是遍历链表，新建一个新的头结点指针 NewL 让他等于递归结果。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="hljs-keyword">if</span>(L == <span class="hljs-literal">NULL</span> || L -&gt; next == <span class="hljs-literal">NULL</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">LinkList NewL = In_reverse(L -&gt; next);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>根据递归的出口条件，当 L -&gt; next == NULL时候返回，此时L就在5的位置，姑且称他为L=5的时候(而不是L指向5这个结点,指向5结点的是其前继4）。同时在递归结束前NewL也等于5，也就是说此时L，NewL都在最末尾的结点。同时因为递归调用已经结束，所以在接下来递归回退的过程中 <code>LinkList NewL = In_reverse(L -&gt; next)</code> 不会再执行，NewL始终留在原链表的最后结点。</p><p><img src="https://pan.asahih.com/images/2019/10/27/OBDVXQKnKz/2.png" alt></p><p>既然递归结束了就要开始退回，根据后进先出的原则，首先回到的是L = 4的时候，开始执行递归调用后的代码</p><p>所以我们需要做什么？我们希望的结果是逆序原来的链表，<strong>现在的情况是我们创建的NewL已经牢牢地呆在原链表的最末尾也就最后新链表的开始，这正是我们想要的，所以我们只需要让4结点和5结点反一下指向不就实现了逆序。</strong></p><p>为了实现反序，让后继的后继等于我，此时4结点和5结点是成环状态，互相指向对方。</p><p><img src="https://pan.asahih.com/images/2019/10/27/YHgwjazckt/3.png" alt></p><p>代码实现上我们让5结点的next指向L，5结点也是4结点（同时也是现在的L）的后继，所以可以</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L -&gt; next -&gt; next = L;</span><br></pre></td></tr></table></figure><p>再让原本4结点的后继指向NULL，也就是反序后新链表的表尾，同时破除了两节点的环。</p><p><img src="https://pan.asahih.com/images/2019/10/27/cmhfDq1Okf/4.png" alt></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L -&gt; next = <span class="hljs-literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>这样一个<code>5(NewL)-&gt;4(L)-&gt;NULL</code> 的链表就形成了。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>所以递归法的代码就是：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">LinkList <span class="hljs-title">In_reverse</span><span class="hljs-params">(LinkList L)</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(L == <span class="hljs-literal">NULL</span> || L -&gt; next == <span class="hljs-literal">NULL</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    LinkList NewL = In_reverse(L -&gt; next);</span><br><span class="line">    L -&gt; next -&gt; next = L;</span><br><span class="line">    L -&gt; next = <span class="hljs-literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码结束了，递归的回退过程还在进行，继续探讨这个过程，此时函数回退到L遍历到3结点的时候，因为第4行已经执行过了，所以从第五行开始。</p><p>和刚才一样我们让3结点的后继指向自己，同时自己指向NULL，现在得到了新的链表<code>5(NewL)-&gt;4-&gt;3(L)-&gt;NULL</code></p><p><img src="https://pan.asahih.com/images/2019/10/27/IzJvh7mbpq/5.png" alt></p><p>递归继续回退到L=2时候，得到新的链表<code>5(NewL)-&gt;4-&gt;3-&gt;2(L)-&gt;NULL</code></p><p><img src="https://pan.asahih.com/images/2019/10/27/h45aSDMwCc/6.png" alt></p><p>终于函数回退到了它递归开始的时候 ，此时L = 1，（<strong>注意：对于带有头结点的单链表在传入时应该是其第一个元素而不是空数据域的头结点</strong>），其他操作还是和之前一样，最终我们就得到了原单链表的反序链表<code>5(NewL)-&gt;4-&gt;3-&gt;2-&gt;1(L)-&gt;NULL</code></p><p><img src="https://pan.asahih.com/images/2019/10/27/90F3rAA6SN/7.png" alt></p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>前面我们提到在传入带有头结点的单链表时候一定要是其第一个元素，而不是头结点，因为考虑如果传入的是头结点，那么当L=1执行完成后，在函数递归回退过程中还存在L为头结点的时候，同样也会让一个没有数据域的头结点加到了反序的单向链表中，中间出现无关结点并不是我们希望的。</p><p><img src="https://pan.asahih.com/images/2019/10/27/IOvtdSvdP4/8.png" alt></p><p>对于存在头结点的单链表在函数的调用时候传入其后继，同时因为反序后的链表没有头节点，所以让原单链表的头结点指向反序后的首元素即可。原来适用于带头结点的遍历函数同样适用。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    L -&gt; next = In_reverse(L -&gt; next);<span class="hljs-comment">//带有头结点的链表需要传入其第一个元素</span></span><br><span class="line"><span class="hljs-comment">//L = In_reverse(L);没有头结点的链表反转</span></span><br><span class="line">   display(L);<span class="hljs-comment">//接收带头结点的单链表进行遍历</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>至此关于单链表反序的两种方法迭代法和递归法就介绍完了，仔细想想虽然简单但其背后的逻辑确实精美巧妙，每次理解完前人写得经典算法总是会不由得感慨他们实在是聪明，解决抽象问题就像计算机思维一样思考。</p><blockquote><p><em>If I have seen further, it is by standing on the shoulders of giants.</em></p><p>Isaac Newton</p></blockquote><p>2019.10.23<br>AsahiHuang</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6gy1g88hraw4ntj31hc0u00vc.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;上次讲了通过&lt;a href=&quot;[https://blog.asahih.com/单向链表的反转//&quot;&gt;迭代法&lt;/a&gt; 的方式，新建一个NewL倒叙插入原链表结点来实现反转，这次来讲递归法。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://asahihuang.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="单链表" scheme="https://asahihuang.github.io/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="https://asahihuang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>单向链表的反转</title>
    <link href="https://asahihuang.github.io/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%8F%8D%E8%BD%AC/"/>
    <id>https://asahihuang.github.io/单向链表的反转/</id>
    <published>2019-10-16T14:15:11.000Z</published>
    <updated>2019-11-07T14:31:40.214Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g80evdkbw7j31hc0u0tas.jpg" alt></p><p>对单向链表的反转是非常经典的算法题，链表不同于数组，节点的遍历需要每个节点逐个访问下去。理解反转的过程能对线性表的链式存储结构有个充分的认识。为了方便理解（也为了防止自己日后忘了）所以尽可能仔细的记录其过程。</p><a id="more"></a><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>首先定义链表结构：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> date;</span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="hljs-keyword">typedef</span> Node * LinkList;</span><br></pre></td></tr></table></figure><p>创建一个链表</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//n 描述了数据数组长度</span></span><br><span class="line"><span class="hljs-comment">//尾插法</span></span><br><span class="line"><span class="hljs-function">LinkList <span class="hljs-title">creatListTail</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    LinkList p,r;</span><br><span class="line">    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));</span><br><span class="line">    r = L;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; n ;i++)&#123;</span><br><span class="line">        p = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));</span><br><span class="line">        p -&gt; date = a[i];</span><br><span class="line">        r -&gt; next = p;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">    r -&gt;next = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//头插法</span></span><br><span class="line"><span class="hljs-function">LinkList <span class="hljs-title">creatListHead</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> a[] ,<span class="hljs-keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));</span><br><span class="line">    L -&gt; next = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        p = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));</span><br><span class="line">        p -&gt;date = a[i];</span><br><span class="line">        p -&gt; next = L -&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定要注意自己的建表方法，因为尾插法插入是按照数据顺序建表的，而头插法则是逆序。<strong>如果你没注意到而用头插法顺序插入数据然后反转当然又变成了顺序了。</strong>为了演示这边使用的是尾插法。同时补上头插法的代码，因为头插法的思想在这里非常重要</p><p>我们以一个长度为5数组来演示：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p>我们得到了一个以L为头指针，包含了五个节点的单向链表</p><p><img src="https://files.catbox.moe/u44zsr.png" alt></p><h2 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h2><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><p>把这条链表想象成一个字符串，如果让你逆序一个字符串”Hello World”，你会怎么做？除了对半交换外，还有个方法是创建一个新的空间然后逆序存放原字符串的每个字符。</p><p>我们也是这样，首先创建一个新的头节点 ，就叫它 NewL。让他的后继节点为NULL，是不是有点像头插法建表步骤， 同时新建一个p指针指向L表的第一个节点，也就是<code>p = L -&gt; next</code>。</p><p><img src="https://files.catbox.moe/ipkm1v.png" alt></p><p>现在我们可以让 p -&gt; next指向 NewL？</p><p><img src="https://files.catbox.moe/lk72a3.png" alt></p><p>不可以，不同于头插法那时我们一直在生成新的p节点，现在<strong>如果直接让 p 的下一节点指向新的表尾，那我们就丢失了L表中 p -&gt; next，也就是p后继节点的位置</strong>，我们就没法遍历接下来的L表了，所以我们需要创建一个temp 来暂时存放p的后继节点，等到 p 也就是当前节点添加到新表完成后再让p回到temp继续。</p><ol><li>我们先创建一个节点指针temp，让temp=p-&gt;next存储p的后继节点信息</li><li>接着我们就可以放心地让p指向新表的表尾（表尾是因为此时NewL还只是NULL）</li></ol><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp = p -&gt; next;<span class="hljs-comment">//让temp存放p后驱节点</span></span><br><span class="line">p - &gt; next = NewL -&gt; next;<span class="hljs-comment">//让p指向当前新表的后继</span></span><br></pre></td></tr></table></figure><p><img src="https://files.catbox.moe/gib4mt.png" alt></p><p>我们完成了一个节点的插入到新表，接下来我们要准备后续节点。首先我们让 NewL -&gt; next = p 从而使接下来的节点始终插入在新表头指针后面，如果你了解头插法你就会发现这一过程极其相似，为了实现逆序我们就是以原来的L表用头插法来创建一个新表，头插法本身就是逆置建表，让p回到temp后进入下次循环，新节点会不断的插入在表头后，直到L表结束。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//头插法部分：</span></span><br><span class="line">...</span><br><span class="line">        p -&gt; next = L -&gt;next;<span class="hljs-comment">//头插入中我们让新节点的后继指向头节点的后继</span></span><br><span class="line">        L-&gt;next = p   <span class="hljs-comment">//然后让头节点的后继变成新节点从而在中间不断插入</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//迭代法部分：</span><br><span class="line">...</span><br><span class="line">        p -&gt;next = NewL -&gt; next;</span><br><span class="line">        NewL -&gt; next = p;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="3"><li>NewL 头指针后继指向p（新插入节点）</li><li>p移动到temp位置回来原表，准备下次循环直到NULL</li></ol><p><img src="https://pan.asahih.com/images/2019/10/27/Mpf6kLntL3/5.png" alt></p><p>代码实现：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">LinkList  <span class="hljs-title">reverse</span><span class="hljs-params">(LinkList L)</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span> || L -&gt; next == <span class="hljs-literal">NULL</span>)&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> L;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkList p = L -&gt; next;</span><br><span class="line">    LinkList NewL = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));</span><br><span class="line">    NewL -&gt; next = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    LinkList temp;</span><br><span class="line">    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span>)&#123;</span><br><span class="line">        temp = p-&gt;next;</span><br><span class="line">        p -&gt;next = NewL -&gt; next;</span><br><span class="line">        NewL -&gt; next = p;</span><br><span class="line">        p = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> NewL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示链表，注意这里链表都是有头节点</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    <span class="hljs-comment">//指向第一个节点</span></span><br><span class="line">    p = L -&gt; next;</span><br><span class="line">    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,p-&gt;date);</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上就是迭代法实现单链表反转的过程。</p><p>后面会再讲讲还有一种方法递归法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6gy1g80evdkbw7j31hc0u0tas.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;对单向链表的反转是非常经典的算法题，链表不同于数组，节点的遍历需要每个节点逐个访问下去。理解反转的过程能对线性表的链式存储结构有个充分的认识。为了方便理解（也为了防止自己日后忘了）所以尽可能仔细的记录其过程。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://asahihuang.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="单链表" scheme="https://asahihuang.github.io/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="https://asahihuang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>用 oneindex 作图床</title>
    <link href="https://asahihuang.github.io/%E7%94%A8%20oneindex%20%E4%BD%9C%E5%9B%BE%E5%BA%8A/"/>
    <id>https://asahihuang.github.io/用 oneindex 作图床/</id>
    <published>2019-08-26T12:57:44.000Z</published>
    <updated>2019-11-07T14:02:06.757Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://files.catbox.moe/gt18o9.png" alt></p><p>写文章最麻烦的莫过于图片的管理和插入了，一个好的图床工具能减轻不少负担，本着勤俭节约（qiong）的原则，想找个免费的图床。</p><a id="more"></a><p>之前使用的 ipic+ 微博图床，虽免费好用，只是用了几次就挂了好几张。有考虑过用七牛云，免费10G空间，不过 https 不计入免费流量，后来因为个人版的 ondrive 送的30G要满了，加了个家庭车群想上车，这时候了解到了oneindex。oneindex 旨在将 onedrive 部署为个人的公盘，同时还可以作为在线的图床工具，oneindex 内容的访问不计入vps的带宽，自带的图床工具简单好用，提供了三种引用格式。比不上ipic拖拽复制方便但也足够实用了(<del><em>本文所有图片都来自 oneindex 的图床</em></del>)，只是国内加载速度慢了点。</p><p>我的 oneindex 地址: <a href="https://pan.asahih.com/" target="_blank" rel="noopener">https://pan.asahih.com/</a></p><p><img src="https://files.catbox.moe/i8tfys.png" alt></p><p><strong>具体的部署方法参考：</strong><a href="http://blog.lwc.im/2018/12/02/oneindex/" target="_blank" rel="noopener">http://blog.lwc.im/2018/12/02/oneindex/</a></p><p>还可以 Aria2+AriaNg 实现离线下载至 oneindex。</p><blockquote><p>2019.10.7 更新</p><p>更换为免费的catbox，加载速度快</p></blockquote><p>AsahiHuang<br>2019.8.26</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/gt18o9.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;写文章最麻烦的莫过于图片的管理和插入了，一个好的图床工具能减轻不少负担，本着勤俭节约（qiong）的原则，想找个免费的图床。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://asahihuang.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="oneindex" scheme="https://asahihuang.github.io/tags/oneindex/"/>
    
  </entry>
  
  <entry>
    <title>夕阳无限好</title>
    <link href="https://asahihuang.github.io/%E5%A4%95%E9%98%B3%E6%97%A0%E9%99%90%E5%A5%BD/"/>
    <id>https://asahihuang.github.io/夕阳无限好/</id>
    <published>2019-08-11T13:44:09.000Z</published>
    <updated>2019-11-07T13:56:21.903Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://files.catbox.moe/q8z277.jpg" alt></p><p>台风“利奇马”离开上海后南汇的夕阳</p><a id="more"></a><p><img src="https://files.catbox.moe/72hvwc.jpg" alt></p><p>AsahiHuang<br>2019.8.11<br>南汇</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/q8z277.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;台风“利奇马”离开上海后南汇的夕阳&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://asahihuang.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="https://asahihuang.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Thinkpad-P51-Hackintosh</title>
    <link href="https://asahihuang.github.io/Thinkpad-P51-Hackintosh/"/>
    <id>https://asahihuang.github.io/Thinkpad-P51-Hackintosh/</id>
    <published>2019-08-04T02:04:30.000Z</published>
    <updated>2019-11-07T14:22:55.408Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://files.catbox.moe/kzk7o9.png" alt></p><a id="more"></a><h2 id="EFI"><a href="#EFI" class="headerlink" title="EFI"></a>EFI</h2><p>针对本机型在GitHub上传过一个EFI针对10.14.2<br><a href="https://github.com/AsahiHuang/ThinkPadP51-Hackintosh" target="_blank" rel="noopener">https://github.com/AsahiHuang/ThinkPadP51-Hackintosh</a></p><p>目前已经更新到10.14.6，更新前注意更新clover版本，老版本alc睡眠唤醒会造成无声，请更新lilu组建，详细方法见上面链接</p><p><img src="https://files.catbox.moe/zapc56.png" alt></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>本机的主要配置信息： </p><table><thead><tr><th>设备</th><th>描述</th></tr></thead><tbody><tr><td>CPU</td><td>i7-7700HQ</td></tr><tr><td>显卡</td><td>HD630</td></tr><tr><td>屏幕</td><td>4k（京东方）</td></tr><tr><td>内存</td><td>16G</td></tr><tr><td>硬盘</td><td>sm961</td></tr></tbody></table><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果你的机型和我差不多的话最方便的办法把下载的镜像写入u盘后直接替换我的EFI文件，<strong>注意包括序列号在内的SMBIOS信息已移除自行修改</strong> </p><p>至于说原生网卡的好处，配合aw解锁啦</p><p><img src="https://files.catbox.moe/41sb70.png" alt></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><blockquote><p>2019.10.7 更新</p><p>版本升级到10.15 完美支持sidecar</p><p><img src="https://files.catbox.moe/6skbe8.png" alt="mac端"></p><p><img src="https://files.catbox.moe/omzhkn.PNG" alt="iPad端"></p></blockquote><p>AsahiHuang</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/kzk7o9.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="黑苹果" scheme="https://asahihuang.github.io/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>对于京都动画的不幸沉痛的悼念</title>
    <link href="https://asahihuang.github.io/%E5%AF%B9%E4%BA%8E%E4%BA%AC%E9%83%BD%E5%8A%A8%E7%94%BB%E7%9A%84%E4%B8%8D%E5%B9%B8%E6%B2%89%E7%97%9B%E7%9A%84%E6%82%BC%E5%BF%B5/"/>
    <id>https://asahihuang.github.io/对于京都动画的不幸沉痛的悼念/</id>
    <published>2019-07-24T03:31:58.000Z</published>
    <updated>2019-11-07T13:47:17.890Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://files.catbox.moe/u9x182.jpg" alt></p><a id="more"></a><blockquote><p>@AsahiHuang<br>最後まで笑ってる強さをもう知っていた，<br> もう泣かない…，<br>もう泣かない…。<br>感谢京阿尼，一切都会安好的</p></blockquote><p><img src="https://files.catbox.moe/j41ivw.jpg" alt></p><p>这已经不仅仅对于动画业界而言的一次沉痛灾难,我们失去了那么多用自己的心血和热情塑造一个个梦想的人，如今只能满怀悲痛的心为他们致以敬意，祝福每一位经历这场不幸的幸存者们早日康复，回到自己的幸福。</p><p>我相信京都动画一定能挺过这段艰难并继续将自己的优秀作品带给大家.    </p><p><img src="https://files.catbox.moe/0poe99.jpg" alt></p><p>AsahiHuang<br>2019.7.24</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://files.catbox.moe/u9x182.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACG" scheme="https://asahihuang.github.io/tags/ACG/"/>
    
  </entry>
  
  <entry>
    <title>摩尔投票算法</title>
    <link href="https://asahihuang.github.io/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95/"/>
    <id>https://asahihuang.github.io/摩尔投票算法/</id>
    <published>2019-07-05T07:04:23.000Z</published>
    <updated>2019-10-16T23:20:42.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>刷leetcode_169 数组tag的时候有道题</p><blockquote><p>给定一个大小为 <em>n</em> 的数组，找到其中的众数。众数是指在数组中出现次数<strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p></blockquote><p>一般来讲大概第一反应是暴力算法,出现次数累加看谁超过了总数量的一半即可输出结果…方法可行可惜效率太低,时间复杂度达到O(n^2^),那有没有线性复杂度的解决办法.</p><a id="more"></a><h2 id="Boyer-Moore-投票算法"><a href="#Boyer-Moore-投票算法" class="headerlink" title="Boyer-Moore 投票算法"></a>Boyer-Moore 投票算法</h2><p>少数服从多数的<strong>摩尔投票算法</strong>就是其中之一的解决之道</p><p>这里按照找众数的题来解释算法的实现过程:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums:[1,1,2,1,2,2,2,1,2]</span><br></pre></td></tr></table></figure><p>比如说该数组nums,显然众数是 <strong>2</strong></p><p>首先我们设置一个候选众数,初始为第一个元素nums[0]</p><p>我们设置一个计数器count,初始值为1,其规则是遇到与候选众数相同的数是+1,不同-1</p><p>当count值为0时,我们让候选众数变为下一位,并将count重置为1,继续上述规则</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,1,2,1,2 | 2,1,2]</span><br></pre></td></tr></table></figure><p>分隔处为count归0时,此时候选众数变为下一位<strong>2</strong>,count值回到1</p><p><strong>显然在这前面这一过程中,随着count值的递增递减到归0我们消耗了相同数量的非众数和众数</strong></p><p>这是我认为投票算法最重要的思想,通过这样的往复,遍历结束后,最终候选众数即为该数组众数</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>附上用C实现上述例子:</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">majorityElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>,res = nums[<span class="hljs-number">0</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(i &lt; numsSize)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!count)</span><br><span class="line">            res = nums[i];</span><br><span class="line">        count += (nums[i] == res ? <span class="hljs-number">1</span>:<span class="hljs-number">-1</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AsahiHuang<br>2019.7.5 at 530</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;刷leetcode_169 数组tag的时候有道题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个大小为 &lt;em&gt;n&lt;/em&gt; 的数组，找到其中的众数。众数是指在数组中出现次数&lt;strong&gt;大于&lt;/strong&gt; &lt;code&gt;⌊ n/2 ⌋&lt;/code&gt; 的元素。&lt;/p&gt;
&lt;p&gt;你可以假设数组是非空的，并且给定的数组总是存在众数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般来讲大概第一反应是暴力算法,出现次数累加看谁超过了总数量的一半即可输出结果…方法可行可惜效率太低,时间复杂度达到O(n^2^),那有没有线性复杂度的解决办法.&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://asahihuang.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法" scheme="https://asahihuang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>eva2020</title>
    <link href="https://asahihuang.github.io/eva2020/"/>
    <id>https://asahihuang.github.io/eva2020/</id>
    <published>2019-06-28T02:31:19.000Z</published>
    <updated>2019-08-04T01:06:09.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EVA-2020新剧场版-0706特别活动"><a href="#EVA-2020新剧场版-0706特别活动" class="headerlink" title="EVA 2020新剧场版 0706特别活动"></a>EVA 2020新剧场版 0706特别活动</h1><img src="/eva2020/eva.png"><a id="more"></a><p>EVA 2020年新剧场版 AVANT1 0706版将在2019.7.6首发</p><p><em>有意思的是,这一时间点正好与飞跃巅峰的结尾0706呼应</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;EVA-2020新剧场版-0706特别活动&quot;&gt;&lt;a href=&quot;#EVA-2020新剧场版-0706特别活动&quot; class=&quot;headerlink&quot; title=&quot;EVA 2020新剧场版 0706特别活动&quot;&gt;&lt;/a&gt;EVA 2020新剧场版 0706特别活动&lt;/h1&gt;&lt;img src=&quot;/eva2020/eva.png&quot;&gt;
    
    </summary>
    
    
      <category term="ACG" scheme="https://asahihuang.github.io/tags/ACG/"/>
    
  </entry>
  
  <entry>
    <title>git常用指令</title>
    <link href="https://asahihuang.github.io/git%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>https://asahihuang.github.io/git 常用指令/</id>
    <published>2019-06-19T07:28:28.000Z</published>
    <updated>2019-08-03T12:29:05.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;email&quot;</span><br><span class="line"></span><br><span class="line">--global参数可以保证机器上所有的git仓库使用这个配置</span><br></pre></td></tr></table></figure><p>然后输入</p><a id="more"></a><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>   查看分支：git branch<br>   创建分支：git branch name<br>   切换分支：git checkout name</p><p>   创建+切换分支：git checkout –b name<br>   合并某分支到当前分支：git merge name<br>   删除分支：git branch –d name</p><h2 id="远程仓库-github"><a href="#远程仓库-github" class="headerlink" title="远程仓库(github)"></a>远程仓库(github)</h2><ol><li><p>创建ssh key</p></li><li><p>github上add ssh key</p></li><li><p>github上创建新的仓库</p></li><li><p>根据GitHub仓库链接 </p> <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/AsahiHuang/Data_Structure.git</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库推送到远程仓库 ,git push,实际将当前分支推送到远程</p><blockquote><p>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p></blockquote></li><li><p>现在,只要本地作提交,可通过</p> <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p> 把本地master分支的最新修改推送到GitHub</p></li></ol><h2 id="文件修改回退"><a href="#文件修改回退" class="headerlink" title="文件修改回退"></a>文件修改回退</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset  –hard HEAD~100</span><br></pre></td></tr></table></figure><p>指向上次修改的指针</p><p>或者</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout  -- filename</span><br></pre></td></tr></table></figure><p>把filename文件在工作区的修改全部撤销</p><blockquote><p>这里有两种情况</p><ol><li>文件自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。</li><li>另外一种是文件已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</li></ol></blockquote><p>再没有commit前,通过此命令也可将删除的文件(rm filename)恢复</p><h2 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程仓库地址</span><br></pre></td></tr></table></figure><p>即可在本地生成一个版本库</p><h2 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h2><p>​    常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge –-no-ff  -m &quot;注释&quot; 合并分支</span><br></pre></td></tr></table></figure><blockquote><p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p></blockquote><h2 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h2><p>​    在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。<br>比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是当前的dev分支上的工作到一半还没有提交,此时无法切换分支.</p><p>​    Git提供了<strong>stash</strong> 功能,可以把当前的工作现场隐藏,等恢复现场后继续工作</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>此时工作区的状态时干净的</p><p>切换回主分支,新建一个临时分支,修复完成后,回到主分支并合并,删除临时分支</p><p>现在回到dev分支</p><p>此时工作区时干净的,可通过</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><p>查看,</p><p>Git把stash内容存在某个地方了，但是需要恢复一下,两种办法:</p><ol><li>git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除</li><li>另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。</li></ol><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ol><li><p>查看日志</p> <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>修改日志</p><p> 最近一次commit的修改:</p> <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初始配置&quot;&gt;&lt;a href=&quot;#初始配置&quot; class=&quot;headerlink&quot; title=&quot;初始配置&quot;&gt;&lt;/a&gt;初始配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &amp;quot;username&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &amp;quot;email&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--global参数可以保证机器上所有的git仓库使用这个配置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后输入&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://asahihuang.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>用hexo写博客</title>
    <link href="https://asahihuang.github.io/%E7%94%A8%20hexo%20%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>https://asahihuang.github.io/用 hexo 写博客/</id>
    <published>2019-06-19T06:49:56.000Z</published>
    <updated>2019-08-04T01:10:02.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><p>在git bush中安装hexo</p><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>新建一个hexo文件夹,用来存放所有代码.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init//初始化</span><br></pre></td></tr></table></figure><p>hexo 会自动下载需要文件.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g //生成</span><br><span class="line">hexo s //启动本地服务</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容</p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>​    找到官方主题:<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> 下载到hexo目录的theme文件下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone #主题仓库地址*  /theme</span><br></pre></td></tr></table></figure><p>修改根目录的_config.yml 中的 <strong>theme: landsape</strong> 改为 *<em>theme: #NewThemeName# *</em></p><p>如果出现莫名其妙问题可通过*<em>hexo clean *</em>来清理,在生成并发布</p><h2 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>首先,ssh key配置好,其次,配置_config.yml中有关deploy的部门: </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:#githubID#/#githubID#.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>#内为替换内容,也就是你的GitHub用户名</p><p>其次还需要在git bash输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>现在输入*<em>hexo d *</em> 就会将本次有改动的代码全部提交,没有改动的不会</p><p>提交完成后原仓库内的文件都没了,存放在了source文件夹.</p><h2 id="常用hexo-命令"><a href="#常用hexo-命令" class="headerlink" title="常用hexo 命令"></a>常用hexo 命令</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>在git bash定位到hexo的根目录</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure><p>hexo就会在*<em>_posts *</em>下生成相关的md文件,然后再markdown编辑器上编写</p><p>一般完整的格式:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><h3 id="让博文列表不显示全部内容"><a href="#让博文列表不显示全部内容" class="headerlink" title="让博文列表不显示全部内容"></a>让博文列表不显示全部内容</h3><p>默认情况下,生成的目录会显示全部的文章内容,可以再合适的位置加上</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><p>即可</p><p>参考:<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在git bush中安装hexo&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://asahihuang.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
