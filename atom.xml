<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AsahiHuang的博客</title>
  <icon>https://www.gravatar.com/avatar/1e701b8870303a644f28f38565fe4fe0</icon>
  <subtitle>相信的心就是你的魔法</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://asahihuang.github.io/"/>
  <updated>2019-08-04T03:27:59.107Z</updated>
  <id>https://asahihuang.github.io/</id>
  
  <author>
    <name>Asahi Huang</name>
    <email>im.xuhuang@live.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Thinkpad-P51-Hackintosh</title>
    <link href="https://asahihuang.github.io/Thinkpad-P51-Hackintosh/"/>
    <id>https://asahihuang.github.io/Thinkpad-P51-Hackintosh/</id>
    <published>2019-08-04T02:04:30.000Z</published>
    <updated>2019-08-04T03:27:59.107Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g5ng1piwfqj312s0t8gvo.jpg" alt></p><a id="more"></a><p>针对本机型在GitHub上传过一个EFI针对10.14.2<br><a href="https://github.com/AsahiHuang/ThinkPadP51-Hackintosh" target="_blank" rel="noopener">https://github.com/AsahiHuang/ThinkPadP51-Hackintosh</a></p><p>目前已经更新到10.14.6，更新前注意更新clover版本，老版本alc睡眠唤醒会造成无声，请更新lilu组建，详细方法见上面链接</p><p>本机的主要配置信息： </p><table><thead><tr><th>设备</th><th>描述</th></tr></thead><tbody><tr><td>CPU</td><td>i7-7700HQ</td></tr><tr><td>显卡</td><td>HD630</td></tr><tr><td>屏幕</td><td>4k（京东方）</td></tr><tr><td>内存</td><td>16G</td></tr><tr><td>硬盘</td><td>sm961</td></tr></tbody></table><p><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5nfwjjpdij31890u0tmm.jpg" alt></p><p>如果你的机型和我差不多的话最方便的办法把下载的镜像写入u盘后直接替换我的EFI文件，<strong>注意包括序列号在内的SMBIOS信息已移除自行修改</strong> </p><p>至于说原生网卡的好处，配合aw解锁啦</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5nfu21935j30y60u04ct.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g5ng1piwfqj312s0t8gvo.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="黑苹果" scheme="https://asahihuang.github.io/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>对于京都动画的不幸沉痛的悼念</title>
    <link href="https://asahihuang.github.io/%E5%AF%B9%E4%BA%8E%E4%BA%AC%E9%83%BD%E5%8A%A8%E7%94%BB%E7%9A%84%E4%B8%8D%E5%B9%B8%E6%B2%89%E7%97%9B%E7%9A%84%E6%82%BC%E5%BF%B5/"/>
    <id>https://asahihuang.github.io/对于京都动画的不幸沉痛的悼念/</id>
    <published>2019-07-24T03:31:58.000Z</published>
    <updated>2019-08-04T01:48:35.886Z</updated>
    
    <content type="html"><![CDATA[<img src="/对于京都动画的不幸沉痛的悼念/IMG_0327.jpg"><a id="more"></a><blockquote><p>@AsahiHuang<br>最後まで笑ってる強さをもう知っていた，<br> もう泣かない…，<br>もう泣かない…。<br>感谢京阿尼，一切都会安好的</p></blockquote><img src="/对于京都动画的不幸沉痛的悼念/IMG_9878.jpg"><p>这已经不仅仅对于动画业界而言的一次沉痛灾难,我们失去了那么多用自己的心血和热情塑造一个个梦想的人，如今只能满怀悲痛的心为他们致以敬意，祝福每一位经历这场不幸的幸存者们早日康复，回到自己的幸福。</p><p>我相信京都动画一定能挺过这段艰难并继续将自己的优秀作品带给大家.    </p><img src="/对于京都动画的不幸沉痛的悼念/IMG_9868.jpg"><p>AsahiHuang<br>2019.7.24</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/对于京都动画的不幸沉痛的悼念/IMG_0327.jpg&quot;&gt;
    
    </summary>
    
    
      <category term="ACG" scheme="https://asahihuang.github.io/tags/ACG/"/>
    
  </entry>
  
  <entry>
    <title>摩尔投票算法</title>
    <link href="https://asahihuang.github.io/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95/"/>
    <id>https://asahihuang.github.io/摩尔投票算法/</id>
    <published>2019-07-05T07:04:23.000Z</published>
    <updated>2019-08-04T01:11:18.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>刷leetcode_169 数组tag的时候有道题</p><blockquote><p>给定一个大小为 <em>n</em> 的数组，找到其中的众数。众数是指在数组中出现次数<strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p></blockquote><p>一般来讲大概第一反应是暴力算法,出现次数累加看谁超过了总数量的一半即可输出结果…方法可行可惜效率太低,时间复杂度达到O(n^2^),那有没有线性复杂度的解决办法.</p><a id="more"></a><h2 id="Boyer-Moore-投票算法"><a href="#Boyer-Moore-投票算法" class="headerlink" title="Boyer-Moore 投票算法"></a>Boyer-Moore 投票算法</h2><p>少数服从多数的<strong>摩尔投票算法</strong>就是其中之一的解决之道</p><p>这里按照找众数的题来解释算法的实现过程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums:[1,1,2,1,2,2,2,1,2]</span><br></pre></td></tr></table></figure><p>比如说该数组nums,显然众数是 <strong>2</strong></p><p>首先我们设置一个候选众数,初始为第一个元素nums[0]</p><p>我们设置一个计数器count,初始值为1,其规则是遇到与候选众数相同的数是+1,不同-1</p><p>当count值为0时,我们让候选众数变为下一位,并将count重置为1,继续上述规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,1,2,1,2 | 2,1,2]</span><br></pre></td></tr></table></figure><p>分隔处为count归0时,此时候选众数变为下一位<strong>2</strong>,count值回到1</p><p><strong>显然在这前面这一过程中,随着count值的递增递减到归0我们消耗了相同数量的非众数和众数</strong></p><p>这是我认为投票算法最重要的思想,通过这样的往复,遍历结束后,最终候选众数即为该数组众数</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>附上本人用C实现上述例子:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>,res = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; numsSize)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!count)</span><br><span class="line">            res = nums[i];</span><br><span class="line">        count += (nums[i] == res ? <span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AsahiHuang<br>2019.7.5 at 530</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;刷leetcode_169 数组tag的时候有道题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个大小为 &lt;em&gt;n&lt;/em&gt; 的数组，找到其中的众数。众数是指在数组中出现次数&lt;strong&gt;大于&lt;/strong&gt; &lt;code&gt;⌊ n/2 ⌋&lt;/code&gt; 的元素。&lt;/p&gt;
&lt;p&gt;你可以假设数组是非空的，并且给定的数组总是存在众数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般来讲大概第一反应是暴力算法,出现次数累加看谁超过了总数量的一半即可输出结果…方法可行可惜效率太低,时间复杂度达到O(n^2^),那有没有线性复杂度的解决办法.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://asahihuang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>eva2020</title>
    <link href="https://asahihuang.github.io/eva2020/"/>
    <id>https://asahihuang.github.io/eva2020/</id>
    <published>2019-06-28T02:31:19.000Z</published>
    <updated>2019-08-04T01:06:09.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EVA-2020新剧场版-0706特别活动"><a href="#EVA-2020新剧场版-0706特别活动" class="headerlink" title="EVA 2020新剧场版 0706特别活动"></a>EVA 2020新剧场版 0706特别活动</h1><img src="/eva2020/eva.png"><a id="more"></a><p>EVA 2020年新剧场版 AVANT1 0706版将在2019.7.6首发</p><p><em>有意思的是,这一时间点正好与飞跃巅峰的结尾0706呼应</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;EVA-2020新剧场版-0706特别活动&quot;&gt;&lt;a href=&quot;#EVA-2020新剧场版-0706特别活动&quot; class=&quot;headerlink&quot; title=&quot;EVA 2020新剧场版 0706特别活动&quot;&gt;&lt;/a&gt;EVA 2020新剧场版 0706特别活动&lt;/h1&gt;&lt;img src=&quot;/eva2020/eva.png&quot;&gt;
    
    </summary>
    
    
      <category term="ACG" scheme="https://asahihuang.github.io/tags/ACG/"/>
    
  </entry>
  
  <entry>
    <title>git常用指令</title>
    <link href="https://asahihuang.github.io/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>https://asahihuang.github.io/git常用指令/</id>
    <published>2019-06-19T07:28:28.000Z</published>
    <updated>2019-08-03T12:29:05.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;email&quot;</span><br><span class="line"></span><br><span class="line">--global参数可以保证机器上所有的git仓库使用这个配置</span><br></pre></td></tr></table></figure><p>然后输入</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>   查看分支：git branch<br>   创建分支：git branch name<br>   切换分支：git checkout name</p><p>   创建+切换分支：git checkout –b name<br>   合并某分支到当前分支：git merge name<br>   删除分支：git branch –d name</p><h2 id="远程仓库-github"><a href="#远程仓库-github" class="headerlink" title="远程仓库(github)"></a>远程仓库(github)</h2><ol><li><p>创建ssh key</p></li><li><p>github上add ssh key</p></li><li><p>github上创建新的仓库</p></li><li><p>根据GitHub仓库链接 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/AsahiHuang/Data_Structure.git</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库推送到远程仓库 ,git push,实际将当前分支推送到远程</p><blockquote><p>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p></blockquote></li><li><p>现在,只要本地作提交,可通过</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p> 把本地master分支的最新修改推送到GitHub</p></li></ol><h2 id="文件修改回退"><a href="#文件修改回退" class="headerlink" title="文件修改回退"></a>文件修改回退</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset  –hard HEAD~100</span><br></pre></td></tr></table></figure><p>指向上次修改的指针</p><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout  -- filename</span><br></pre></td></tr></table></figure><p>把filename文件在工作区的修改全部撤销</p><blockquote><p>这里有两种情况</p><ol><li>文件自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。</li><li>另外一种是文件已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</li></ol></blockquote><p>再没有commit前,通过此命令也可将删除的文件(rm filename)恢复</p><h2 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程仓库地址</span><br></pre></td></tr></table></figure><p>即可在本地生成一个版本库</p><h2 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h2><p>​    常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge –-no-ff  -m &quot;注释&quot; 合并分支</span><br></pre></td></tr></table></figure><blockquote><p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p></blockquote><h2 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h2><p>​    在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。<br>比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是当前的dev分支上的工作到一半还没有提交,此时无法切换分支.</p><p>​    Git提供了<strong>stash</strong> 功能,可以把当前的工作现场隐藏,等恢复现场后继续工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>此时工作区的状态时干净的</p><p>切换回主分支,新建一个临时分支,修复完成后,回到主分支并合并,删除临时分支</p><p>现在回到dev分支</p><p>此时工作区时干净的,可通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><p>查看,</p><p>Git把stash内容存在某个地方了，但是需要恢复一下,两种办法:</p><ol><li>git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除</li><li>另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。</li></ol><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ol><li><p>查看日志</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>修改日志</p><p> 最近一次commit的修改:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初始配置&quot;&gt;&lt;a href=&quot;#初始配置&quot; class=&quot;headerlink&quot; title=&quot;初始配置&quot;&gt;&lt;/a&gt;初始配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &amp;quot;username&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &amp;quot;email&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--global参数可以保证机器上所有的git仓库使用这个配置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后输入&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://asahihuang.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>用hexo写博客</title>
    <link href="https://asahihuang.github.io/%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>https://asahihuang.github.io/用hexo写博客/</id>
    <published>2019-06-19T06:49:56.000Z</published>
    <updated>2019-08-04T01:10:02.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><p>在git bush中安装hexo</p><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>新建一个hexo文件夹,用来存放所有代码.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init//初始化</span><br></pre></td></tr></table></figure><p>hexo 会自动下载需要文件.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g //生成</span><br><span class="line">hexo s //启动本地服务</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容</p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>​    找到官方主题:<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> 下载到hexo目录的theme文件下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone #主题仓库地址*  /theme</span><br></pre></td></tr></table></figure><p>修改根目录的_config.yml 中的 <strong>theme: landsape</strong> 改为 *<em>theme: #NewThemeName# *</em></p><p>如果出现莫名其妙问题可通过*<em>hexo clean *</em>来清理,在生成并发布</p><h2 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>首先,ssh key配置好,其次,配置_config.yml中有关deploy的部门: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:#githubID#/#githubID#.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>#内为替换内容,也就是你的GitHub用户名</p><p>其次还需要在git bash输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>现在输入*<em>hexo d *</em> 就会将本次有改动的代码全部提交,没有改动的不会</p><p>提交完成后原仓库内的文件都没了,存放在了source文件夹.</p><h2 id="常用hexo-命令"><a href="#常用hexo-命令" class="headerlink" title="常用hexo 命令"></a>常用hexo 命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>在git bash定位到hexo的根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure><p>hexo就会在*<em>_posts *</em>下生成相关的md文件,然后再markdown编辑器上编写</p><p>一般完整的格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><h3 id="让博文列表不显示全部内容"><a href="#让博文列表不显示全部内容" class="headerlink" title="让博文列表不显示全部内容"></a>让博文列表不显示全部内容</h3><p>默认情况下,生成的目录会显示全部的文章内容,可以再合适的位置加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><p>即可</p><p>参考:<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在git bush中安装hexo&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://asahihuang.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
